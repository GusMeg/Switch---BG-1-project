{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/FundManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\r\n\r\n\r\nenum status {PENDING, TRANSFERRED, PROCESSING}\r\nstruct txForm {\r\n    //Form to keep registry of logged transactions.\r\n    uint256 index;\r\n    address addressFrom;\r\n    address payable addressTo;\r\n    uint256 timestamp;\r\n    uint256 txValue;\r\n    status _status;\r\n}\r\nstruct automParam {\r\n    //Input of params needed for automation\r\n    uint256 interval; //For Time Trigger\r\n    address add;      //For Contract Query\r\n    string network;   //For Contract Query\r\n    uint256 index;    //For Contract Query\r\n}\r\n\r\n\r\ncontract FundManager is Ownable, AutomationCompatibleInterface{\r\n    event Transaction(address addressFrom, address addressTo, uint256 amonut);\r\n    event AppendTxForm(txForm appended);\r\n    event UpdateTxForm(txForm updated);\r\n    //uint256 private gasBalance;\r\n    status[] pendingTxIndex;\r\n    txForm[] private txLogHistory;\r\n    txForm[] private txLogTransferred;\r\n    automParam private _autoParam;\r\n    uint256 private selector;\r\n\r\n    constructor(address _owner){\r\n        super.transferOwnership(_owner);\r\n    }\r\n\r\n    function returnBalance(address _add) public view returns(uint256){\r\n        return _add.balance;\r\n    }\r\n    function returnExampleForm(uint index) public pure returns(automParam memory){\r\n        automParam memory newTx;\r\n        newTx.add = address(0x4ec87371d9711Eac0c90Ea946C54D143Ff78872e);\r\n        newTx.index = index;\r\n        newTx.interval = 5*60;\r\n        newTx.network = \"sepolia\";\r\n        return newTx;\r\n    }\r\n\r\n    function addGas() public payable onlyOwner{\r\n        //For adding gas to the gas tank.\r\n        (bool txSuccess, ) = address(this).call{value: msg.value}(\"\");\r\n        require(txSuccess,\"Transaction Failed. Could not add gas\");\r\n    }\r\n\r\n    function getForm(uint256 index) public view returns(txForm memory) {\r\n        return txLogHistory[index];\r\n    }\r\n\r\n    function getGasBalance() public view returns(uint256){\r\n        uint256 result = address(this).balance - getLockedTxValue();\r\n        if(result < 0) { return 0; }\r\n        else { return result; }\r\n    }\r\n\r\n    function getLockedTxValue() public view returns(uint256){\r\n        uint256 sum = 0;\r\n        if(pendingTxIndex.length > 0){\r\n            for(uint256 i = 0; i< txLogHistory.length; i++){\r\n                if(pendingTxIndex[i] == status.PENDING){\r\n                    uint256 value = txLogHistory[i].txValue;\r\n                    sum += value;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function setTx(address payable addressTo, uint256 _selector, automParam memory _aP) public payable onlyOwner{\r\n        //Funds and logs tx.\r\n        //Then it calls automation function.\r\n        (bool txSuccess, ) = address(this).call{value: msg.value}(\"\");\r\n        require(txSuccess,\"Transaction Failed\");\r\n        emit Transaction(msg.sender, address(this), msg.value);\r\n        txForm memory _txForm;\r\n        _txForm.index = txLogHistory.length;\r\n        _txForm._status = status.PENDING;\r\n        _txForm.addressFrom = tx.origin;\r\n        _txForm.addressTo = addressTo;\r\n        _txForm.timestamp = block.timestamp;\r\n        _txForm.txValue = msg.value;\r\n        txLogHistory.push(_txForm);\r\n        emit AppendTxForm(_txForm);\r\n        pendingTxIndex.push(status.PENDING);\r\n        selector = _selector;\r\n        _autoParam = _aP;\r\n        //EthSepolia Registrar Address: 0xb0E49c5D0d05cbc241d68c05BC5BA1d1B7B72976.\r\n        //EthSepolia Link Address: 0x779877A7B0D9E8603169DdbD7836e478b4624789.\r\n    }\r\n\r\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory performData){\r\n\r\n        if(selector == 0){\r\n            //Time Trigger.\r\n            status[] memory auxPending = pendingTxIndex;\r\n            for(uint256 i = 0; i< pendingTxIndex.length; i++){\r\n                if(pendingTxIndex[i]==status.PENDING){\r\n                    bool result = checkTimeTrigger(_autoParam.interval, txLogHistory[i]);\r\n                    if(result){\r\n                        upkeepNeeded = true;\r\n                        auxPending[i] = status.PROCESSING;\r\n                    }\r\n                }\r\n            }\r\n            performData = abi.encode(auxPending);\r\n        }\r\n        else if(selector == 1){\r\n            checkAbiTrigger(_autoParam.add, _autoParam.network, _autoParam.index);\r\n        }\r\n    }\r\n\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        (status[] memory auxPending) = abi.decode(performData,(status[]));\r\n        for(uint256 i = 0; i < auxPending.length; i++){\r\n            if(auxPending[i] == status.PROCESSING){\r\n                makeTx(txLogHistory[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkTimeTrigger(uint256 interval, txForm memory _txForm) public view returns(bool) {\r\n        uint256 iniTime = _txForm.timestamp;\r\n        if(interval < block.timestamp - iniTime){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    function checkAbiTrigger(address _add, string memory _network, uint256 index) public view {\r\n\r\n    }\r\n\r\n    function makeTx(txForm memory _txForm) private {\r\n        address payable _to = _txForm.addressTo;\r\n        uint256 txValue = _txForm.txValue;\r\n        uint256 index = _txForm.index;\r\n\r\n        (bool success,) = _to.call{value: txValue}(\"\");\r\n        require(success, \"Transaction Failed. Check Gas Tank.\");\r\n        emit Transaction(msg.sender, _to , txValue);\r\n        txForm memory newTxLog = _txForm;\r\n        newTxLog.timestamp = block.timestamp; \r\n        txLogTransferred.push(newTxLog);\r\n        pendingTxIndex[index] = status.TRANSFERRED;\r\n        txLogHistory[index]._status = status.TRANSFERRED;\r\n        emit UpdateTxForm(txLogHistory[index]);\r\n    }\r\n\r\n    function withdrawGas(address _adr, uint256 _value) public onlyOwner {\r\n/*        if(_value < gasBalance){\r\n            (bool success,) = _adr.call{value: _value}(\"\");\r\n            require(success,\"Transaction failed\");\r\n        }\r\n*/\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}